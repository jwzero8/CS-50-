#include "helpers.h"
#include <math.h>

// Convert image to grayscale
// My thought: compare RGB triple. Equals them. And rmb to roundoff to int
void grayscale(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            float blue = image[i][j].rgbtBlue;
            float green = image[i][j].rgbtGreen;
            float red = image[i][j].rgbtRed;

            // Take average
            int gray_applied = round((blue + green + red) / 3);
            image[i][j].rgbtBlue = image[i][j].rgbtGreen = image[i][j].rgbtRed = gray_applied;

        }
    }
    return;
}

// Convert image to sepia
// My thought: apply the formula, cap them at 255 for corner cases

void sepia(int height, int width, RGBTRIPLE image[height][width])
{
     for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            // Modify names of variables to fit the formula
            float originalBlue = image[i][j].rgbtBlue;
            float originalGreen = image[i][j].rgbtGreen;
            float originalRed = image[i][j].rgbtRed;
            int sepiaRed = round(.393 * originalRed + .769 * originalGreen + .189 * originalBlue);
            int sepiaGreen = round(.349 * originalRed + .686 * originalGreen + .168 * originalBlue);
            int sepiaBlue = round(.272 * originalRed + .534 * originalGreen + .131 * originalBlue);

            if (sepiaRed > 255)
            {
                sepiaRed = 255;
            }

            if (sepiaBlue > 255)
            {
                sepiaBlue = 255;
            }

            if (sepiaGreen > 255)
            {
                sepiaGreen = 255;
            }
            // Update the new RGB value
            image[i][j].rgbtBlue = sepiaBlue;
            image[i][j].rgbtGreen = sepiaGreen;
            image[i][j].rgbtRed = sepiaRed;

        }
    }
    return;
}

// Reflect image horizontally
// My thought: Using nested for loops, similar to Week 1 problem set I guess?
void reflect(int height, int width, RGBTRIPLE image[height][width])
{
     for (int i = 0; i < height; i++)
    {
        // Note: without / 2 will return the same image
        for (int j = 0; j < width / 2; j++)
        {
            RGBTRIPLE tmp = image[i][j];
            image[i][j] = image[i][width - (j + 1)];
            image[i][width - (j + 1)] = tmp;

        }
    }
    return;
}

// Blur image
// My thought: Take the average for a 3X3 square, sometimes not the case tho
// My thought: Probably need a copy of orginal image
void blur(int height, int width, RGBTRIPLE image[height][width])
{

RGBTRIPLE copy[height][width];

    // Make a copy of the original one first
    for (int i = 0; i < height; i++)
    {

        for (int j = 0; j < width ; j++)
        {

            copy[i][j] = image[i][j];
        }
    }

    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            int red_count, green_count, blue_count;
            red_count = green_count = blue_count = 0;
            float counter = 0;

            // Introduce x-y coordinate for validating surrounding pixels
            for (int x = -1; x < 2; x++)
            {
                for (int y = -1; y < 2; y++)
                {
                    int x_co = x + i;
                    int y_co = y + j;

                    // Conditions to determine whether there is/are pixels not wanted
                    if (x_co < 0 || x_co > (height - 1) || y_co < 0 || y_co > (width - 1))
                    {
                        continue;
                    }

                    red_count = red_count + image[x_co][y_co].rgbtRed;
                    blue_count = blue_count + image[x_co][y_co].rgbtBlue;
                    green_count = green_count + image[x_co][y_co].rgbtGreen;

                    counter = counter + 1;

                }
                copy[i][j].rgbtRed = round(red_count / counter);
                copy[i][j].rgbtBlue = round(blue_count / counter);
                copy[i][j].rgbtGreen = round(green_count / counter);
            }

        }
    }

    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            image[i][j].rgbtRed = copy[i][j].rgbtRed;
            image[i][j].rgbtBlue = copy[i][j].rgbtBlue;
            image[i][j].rgbtGreen = copy[i][j].rgbtGreen;
        }
    }
    return;
}
